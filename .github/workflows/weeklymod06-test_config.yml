name: Weekly assign 06 - Github Actions

on:
  push:
    paths:
      - 'Weekly-assignments/06Week_github-acti-work/quick_infra/**'
  workflow_dispatch:

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  WORKING_DIR: ./Weekly-assignments/06Week_github-acti-work/quick_infra

  TF_VAR_rgname: "ez-rg-module06"
  TF_VAR_location: '["West Europe", "North Europe", "East US"]'
  TF_VAR_base_name: "ez-mod06"
  TF_VAR_billing_code: "EZITBilling223381"
  TF_VAR_saac_name: "saacweb"
  TF_VAR_source_content: "<h1>Webpage created with Terraform</h1>"
  TF_VAR_index_document: "index.html"
  TF_VAR_department_inf: "Infrastructure"
  TF_VAR_department_economy: "Economy"
  TF_VAR_project_name: "Module 06"
  TF_VAR_owner_name: "Eskil Refsgaard"
  TF_VAR_rsa_ssh_key: ${{ secrets.RSA_SSH_KEY }}

# FÃ¸lte dette var litt confusing. 
# Her er jobben dev, som vil starte stage hvis successfull. 
jobs:
  validate_syntax:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Terraform init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}

      - name: Repo format and validate format
        run: terraform fmt -check
        working-directory: ${{ env.WORKING_DIR }}

  deploy_dev:
    needs: validate_syntax
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Terraform init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}
        
      - name: Terraform workspace select or create dev
        run: terraform workspace select dev || terraform workspace new dev
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Terraform apply dev
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIR }}

      - name: Test dev
        run: curl $(terraform output -raw primary_web_endpoint)
        working-directory: ${{ env.WORKING_DIR }}

      - name: Get Web Endpoint
        id: get_web_endpoint
        run: echo "WEB_ENDPOINT=$(terraform output -raw primary_web_endpoint)" 
        working-directory: ${{ env.WORKING_DIR }}

  deploy_stage:
    needs: deploy_dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Terraform init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}
        
      - name: Terraform workspace select or create stage
        run: terraform workspace select stage || terraform workspace new stage
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Terraform apply stage
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIR }}

      - name: Test stage
        run: curl $(terraform output -raw primary_web_endpoint)
        working-directory: ${{ env.WORKING_DIR }}

      - name: Get Web Endpoint
        id: get_web_endpoint
        run: echo "WEB_ENDPOINT=$(terraform output -raw primary_web_endpoint)" 
        working-directory: ${{ env.WORKING_DIR }}


  deploy_prod:
    needs: deploy_stage
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.get_web_endpoint.outputs.WEB_ENDPOINT }} # replace deploy_prod and web_url with actual output variables
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Terraform init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}
        
      - name: Terraform workspace select or create prod
        run: terraform workspace select prod || terraform workspace new prod
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Terraform apply prod
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIR }}

      - name: Test prod
        run: curl $(terraform output -raw primary_web_endpoint)
        working-directory: ${{ env.WORKING_DIR }}

      - name: Get Web Endpoint
        id: get_web_endpoint
        run: echo "WEB_ENDPOINT=$(terraform output -raw primary_web_endpoint)" 
        working-directory: ${{ env.WORKING_DIR }}